import io

from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BufferedInputFile, \
    InputFile
from aiogram import F, types, Router
from aiogram.fsm.context import  FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from database.database_utils import check_user_registration, get_paginated_diagnostics, get_total_diagnostics_count
from bot.config import logger



history_router = Router()


class HistoryProcessStates(StatesGroup):
    waiting_for_choi—Åe_analysis = State()

#======================================================================================================================#

def GetHistory(message : Message, username):
    """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        :return: –°–ø–∏—Å–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫ –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    """
    if check_user_registration(username):
        return get_paginated_diagnostics(username)
    else:
        logger.error(f"üÜò –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return

def get_diagnostics_keyboard(diagnostics, page, per_page=5, total_diagnostics=0):
    """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

        :param diagnostics: –°–ø–∏—Å–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        :param page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        :param per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        :param total_diagnostics: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """

    keyboard = []
    for diag in diagnostics:
        btn = InlineKeyboardButton(text=diag["date"].strftime("%Y-%m-%d %H:%M"), callback_data=f"diag_{diag['id']}")

        # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        keyboard.append([btn])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if (page + 1) * per_page < total_diagnostics:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"page_{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@history_router.message(Command("get_history"))
async def GetUserChoice(message: Message, state: FSMContext):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get_history. –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FSM
        :return: None
    """

    username = message.from_user.username
    diagnostics = await get_paginated_diagnostics(username, page=0)
    if diagnostics:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å DetachedInstanceError
        diagnostics_data = [
            {"id": diag["id"], "filename": diag["filename"], "diagnosis": diag["diagnosis"], "date" : diag["date"], "file_bin" : diag["file_bin"]}
            for diag in diagnostics
        ]

        await state.update_data(diagnostics=diagnostics_data, current_page=0)
        total_diagnostics = await get_total_diagnostics_count(username)
        keyboard = get_diagnostics_keyboard(diagnostics_data, page=0, per_page=5, total_diagnostics=total_diagnostics)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:", reply_markup=keyboard)
        await state.set_state(HistoryProcessStates.waiting_for_choi—Åe_analysis)
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫.")



@history_router.callback_query(lambda c: c.data.startswith("diag_"))
async def show_diagnostic_result(callback: CallbackQuery, state: FSMContext):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –¥–∏–∞–≥–Ω–æ–∑.

        :param callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        :return: None
    """

    diag_id = int(callback.data.split("_")[1])
    data = await state.get_data()
    diagnostics = data.get("diagnostics", [])

    # –ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ id
    diagnostic = next((diag for diag in diagnostics if diag.get("id") == diag_id), None)
    if diagnostic:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ—Ç–æ–∫ –±–∞–π—Ç–æ–≤
        photo_stream = io.BytesIO(diagnostic["file_bin"])
        photo_stream.seek(0)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile –≤–º–µ—Å—Ç–æ InputFile
        photo_file = BufferedInputFile(photo_stream.read(), filename=diagnostic["filename"])
        result_text = f"üìã **–î–∏–∞–≥–Ω–æ–∑:** {diagnostic.get('diagnosis')}"
        await callback.message.delete()
        await callback.message.answer_photo(
            photo=photo_file,
            caption = result_text
        )
    else:
        await callback.answer("–ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")




@history_router.callback_query(lambda c: c.data.startswith("page_"))
async def change_page(callback: CallbackQuery):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞–º–∏.

        :param callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        :return: None
    """
    page = int(callback.data.split("_")[1])
    username = callback.from_user.username
    diagnostics, total_diagnostics = await get_paginated_diagnostics(username, page=page), await get_total_diagnostics_count(username)
    if diagnostics:
        keyboard = get_diagnostics_keyboard(
            diagnostics, page, per_page=5, total_diagnostics=total_diagnostics
        )
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:", reply_markup=keyboard)
    else:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")




