

from aiogram.filters import Command, CommandStart
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, Message, InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery
from aiogram import Router, F , types
from aiogram.fsm.context import  FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter

from bot.config import logger


replyCommands = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="/start"), KeyboardButton(text = "/help")],[KeyboardButton(text = "/registration")]],
                                 resize_keyboard=True)
answerSkipAgeButton = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skipAge")]])

answerGenderStateButton = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="–º—É–∂—Å–∫–æ–π"),InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="–∂–µ–Ω—Å–∫–∏–π")],
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skipGender")]
        ])


class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_surname = State()
    waiting_for_age = State()
    waiting_for_gender = State()
router_handler = Router()

@router_handler.message(CommandStart())
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —ç–∫—Å–ø—Ä–µ—Å—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–≤–æ–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è."
                         " –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ!")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")

@router_handler.message(Command('help'))
async def help(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞–Ω—Å (–ª–∏—Ü–æ–º –∫ –∫–∞–º–µ—Ä–µ) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!", reply_markup=replyCommands)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register - —Å—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router_handler.message(Command('registration'))
async def cmd_register(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    prompt_message = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.update_data(prompt_message_id=prompt_message.message_id)
    await state.set_state(RegistrationStates.waiting_for_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router_handler.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: Message, state: FSMContext):
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –≤–≤—ë–ª –∏–º—è: {message.text}")
    await state.update_data(name=message.text)
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")

    await message.delete()
    await message.bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
        chat_id=message.chat.id,
        message_id=prompt_message_id
    )
    await state.set_state(RegistrationStates.waiting_for_surname)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
@router_handler.message(StateFilter(RegistrationStates.waiting_for_surname))
async def process_surname(message: Message, state: FSMContext):
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –≤–≤—ë–ª —Ñ–∞–º–∏–ª–∏—é: {message.text}")
    await state.update_data(surname=message.text)
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")
    await message.delete()
    await message.bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        chat_id=message.chat.id,
        message_id=prompt_message_id,
        reply_markup=answerSkipAgeButton
    )
    await state.set_state(RegistrationStates.waiting_for_age)


@router_handler.callback_query(F.data == "skipAge", RegistrationStates.waiting_for_age)
async def skip_age(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(age=None)
    data = await state.get_data()
    error_msg_id = data.get("error_age_msg_id")
    logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞: {data.get('age')=}")
    if error_msg_id:
        await callback_query.bot.delete_message(callback_query.message.chat.id, error_msg_id)

    prompt_message_id = data.get("prompt_message_id")
    await callback_query.bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        chat_id=callback_query.message.chat.id,
        message_id=prompt_message_id,
        reply_markup=answerGenderStateButton
    )
    await callback_query.answer()
    await state.set_state(RegistrationStates.waiting_for_gender)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@router_handler.message(StateFilter(RegistrationStates.waiting_for_age))
async def process_age(message: Message, state: FSMContext):
    data = await state.get_data()
    error_msg_id = None
    if not message.text.isdigit():
        logger.info(f"üÜòÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {message.text}")
        error_msg_id = data.get("error_age_msg_id")
        if error_msg_id:
            await message.bot.delete_message(message.chat.id, error_msg_id)
        error_age_msg = await message.answer("üÜòÔ∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.update_data(error_age_msg_id=error_age_msg.message_id)
        await message.delete()
        return

    await state.update_data(age=int(message.text))
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –≤–≤—ë–ª –≤–æ–∑—Ä–∞—Å—Ç: {message.text}")

    error_msg_id = data.get("error_age_msg_id")
    if error_msg_id:
        await message.bot.delete_message(message.chat.id, error_msg_id)

    prompt_message_id = data.get("prompt_message_id")
    await message.delete()
    await message.bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        chat_id=message.chat.id,
        message_id=prompt_message_id,
        reply_markup=answerGenderStateButton
    )
    await state.set_state(RegistrationStates.waiting_for_gender)

@router_handler.message(StateFilter(RegistrationStates.waiting_for_gender))
async def process_gender(message: Message):
    logger.info(f"üÜò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    await message.delete()
    return


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
@router_handler.callback_query(StateFilter(RegistrationStates.waiting_for_gender))
async def process_gender(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    choice = callback_query.data
    gender = None if choice == "skipGender" else choice
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –≤–≤—ë–ª –ø–æ–ª: {gender=}")
    await state.update_data(gender=gender)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    data = await state.get_data()

    # –ü–æ–∑–∂–µ —Å–¥–µ–ª–∞—é –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    # # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # async with async_session() as session:
    #     async with session.begin():
    #         new_user = Users(
    #             name=data['name'],
    #             surname=data['surname'],
    #             username=data['username'],
    #             age=data.get('age'),
    #             gender=data.get('gender')
    #         )
    #         session.add(new_user)
    #     # –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ session.begin() commit –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

    prompt_message_id = data.get("prompt_message_id")
    await callback_query.bot.edit_message_text(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        chat_id=callback_query.message.chat.id,
        message_id=prompt_message_id
    )
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {data=}")
    await state.clear()


@router_handler.message()
async def echo(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")

