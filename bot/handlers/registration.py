from aiogram.filters import Command
from aiogram.types import  Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F, types, Router
from aiogram.fsm.context import  FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter


from bot.database.database_utils import check_user_registration, register_user
from bot.config import logger


answerSkipAgeButton = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skipAge")]])

answerGenderStateButton = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="–º—É–∂—Å–∫–æ–π"),InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="–∂–µ–Ω—Å–∫–∏–π")],
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skipGender")]
        ])

registration_router = Router()

class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_surname = State()
    waiting_for_age = State()
    waiting_for_gender = State()

@registration_router.message(Command('registration'))
async def cmd_register(message: Message, state: FSMContext):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /registration. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.

        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_registration = await check_user_registration(message.from_user.username)
    if user_registration:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} - {message.from_user.username} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    prompt_message = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.update_data(prompt_message_id=prompt_message.message_id)
    await state.set_state(RegistrationStates.waiting_for_name)

@registration_router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: Message, state: FSMContext):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏.

        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        :return: None
    """
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –≤–≤—ë–ª –∏–º—è: {message.text}")
    await state.update_data(name=message.text)
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")

    await message.delete()
    await message.bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
        chat_id=message.chat.id,
        message_id=prompt_message_id
    )
    await state.set_state(RegistrationStates.waiting_for_surname)

@registration_router.message(StateFilter(RegistrationStates.waiting_for_surname))
async def process_surname(message: Message, state: FSMContext):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞.

        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        :return: None
    """
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –≤–≤—ë–ª —Ñ–∞–º–∏–ª–∏—é: {message.text}")
    await state.update_data(surname=message.text)
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")
    await message.delete()
    await message.bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        chat_id=message.chat.id,
        message_id=prompt_message_id,
        reply_markup=answerSkipAgeButton
    )
    await state.set_state(RegistrationStates.waiting_for_age)


@registration_router.callback_query(F.data == "skipAge", RegistrationStates.waiting_for_age)
async def skip_age(callback_query: types.CallbackQuery, state: FSMContext):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –ø—Ä–∏ –≤–≤–æ–¥–µ –≤–æ–∑—Ä–∞—Å—Ç–∞.
        –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞.

        :param callback_query: Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        :return: None
    """
    await state.update_data(age=None)
    data = await state.get_data()
    error_msg_id = data.get("error_age_msg_id")
    logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞: {data.get('age')=}")
    if error_msg_id:
        await callback_query.bot.delete_message(callback_query.message.chat.id, error_msg_id)

    prompt_message_id = data.get("prompt_message_id")
    await callback_query.bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        chat_id=callback_query.message.chat.id,
        message_id=prompt_message_id,
        reply_markup=answerGenderStateButton
    )
    await callback_query.answer()
    await state.set_state(RegistrationStates.waiting_for_gender)


@registration_router.message(StateFilter(RegistrationStates.waiting_for_age))
async def process_age(message: Message, state: FSMContext):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).
        –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî –≤—ã–±–æ—Ä –ø–æ–ª–∞.

        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        :return: None
    """
    data = await state.get_data()
    if not message.text.isdigit():
        logger.info(f"üÜòÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {message.text}")
        error_msg_id = data.get("error_age_msg_id")
        if error_msg_id:
            await message.bot.delete_message(message.chat.id, error_msg_id)
        error_age_msg = await message.answer("üÜòÔ∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.update_data(error_age_msg_id=error_age_msg.message_id)
        await message.delete()
        return

    await state.update_data(age=int(message.text))
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –≤–≤—ë–ª –≤–æ–∑—Ä–∞—Å—Ç: {message.text}")

    error_msg_id = data.get("error_age_msg_id")
    if error_msg_id:
        await message.bot.delete_message(message.chat.id, error_msg_id)

    prompt_message_id = data.get("prompt_message_id")
    await message.delete()
    await message.bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        chat_id=message.chat.id,
        message_id=prompt_message_id,
        reply_markup=answerGenderStateButton
    )
    await state.set_state(RegistrationStates.waiting_for_gender)

@registration_router.message(StateFilter(RegistrationStates.waiting_for_gender))
async def process_gender(message: Message):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞.
        –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –µ–≥–æ.

        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: None
    """
    logger.info(f"üÜò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    await message.delete()
    return


@registration_router.callback_query(StateFilter(RegistrationStates.waiting_for_gender))
async def process_gender(callback_query: CallbackQuery, state: FSMContext):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É.

        :param callback_query: Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª–æ–º
        :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        :return: None
    """
    await callback_query.answer()
    choice = callback_query.data
    gender = None if choice == "skipGender" else choice
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –≤–≤—ë–ª –ø–æ–ª: {gender=}")
    await state.update_data(gender=gender)

    data = await state.get_data()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await register_user(
        name=data['name'],
        surname=data['surname'],
        username=callback_query.from_user.username,
        age=data.get('age'),
        gender=data.get('gender')
    )

    prompt_message_id = data.get("prompt_message_id")
    await callback_query.bot.edit_message_text(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        chat_id=callback_query.message.chat.id,
        message_id=prompt_message_id
    )
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {data=}")
    await state.clear()

