# Description: –ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
import threading
import os

from aiogram import types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BufferedInputFile
from aiogram.fsm.context import  FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import Router

from bot.config import bot, logger
from microservices.predict.services.detect_disease.server import Server_disease, run_server_disease
from microservices.predict.services.predict_age.server import Server_age, run_server_age
from microservices.predict.client.detect_disease import client as client_disease
from microservices.predict.client.pedict_age import client as client_age

#======================================================================================================================#

class UserActions(StatesGroup):
    photos_processing = State()


router_analyzer = Router()

photoProcessingCommands = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="analyze_age")],
            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", callback_data="diagnose_disease")]
        ])

#======================================================================================================================#
@router_analyzer.message(F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    photo_path = f"{message.from_user.id}_photo.jpg"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ {photo_path}")
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        await bot.download_file(file_info.file_path, photo_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(photo_path=photo_path)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(UserActions.photos_processing)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=photoProcessingCommands)
        logger.info(f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ.")
    except Exception as e:
        logger.error(f"üÜò –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.reply(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")



#======================================================================================================================#

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç"
@router_analyzer.callback_query(F.data == "analyze_age", UserActions.photos_processing)
async def analyze_age(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    photo_path = user_data.get("photo_path")
    result_path = f"{callback.from_user.id}_result.jpg"

    if not photo_path:
        logger.error(f"üÜò –ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–æ–∑—Ä–∞—Å—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ —Ñ–æ—Ç–æ –Ω–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
        await callback.message.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
        return

    try:
        # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º—É —Å–µ—Ä–≤–∏—Å—É

        server_instance = Server_age()
        server_thread = threading.Thread(target=run_server_age, args=(server_instance,), daemon=True)
        server_thread.start()
        results = client_age.get_predict(photo_path)
        annotated_photo = results.image

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.")

        server_instance.stop()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await callback.message.answer_photo(
            photo=BufferedInputFile(annotated_photo, filename=result_path),
            caption=results.report
        )

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∞–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞.")

    except Exception as e:
        logger.error(f"üÜò –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
        await callback.message.reply(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(photo_path):
            os.remove(photo_path)
        if os.path.exists(result_path):
            os.remove(result_path)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.full_name} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ.")



#======================================================================================================================#

@router_analyzer.callback_query(F.data == "diagnose_disease", UserActions.photos_processing)
async def diagnose_disease(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    photo_path = user_data.get("photo_path")
    result_path = f"{callback.from_user.id}_diagnosis_result.jpg"

    if not photo_path:
        logger.error(f"üÜò –ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–æ–∑—Ä–∞—Å—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ —Ñ–æ—Ç–æ –Ω–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
        await callback.message.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return

    try:
        # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º—É —Å–µ—Ä–≤–∏—Å—É
        server_instance = Server_disease()
        server_thread = threading.Thread(target=run_server_disease, args=(server_instance,), daemon=True)
        server_thread.start()
        results = client_disease.get_predict(photo_path)
        annotated_photo = results.image

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.")

        server_instance.stop()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await callback.message.answer_photo(
            photo=BufferedInputFile(annotated_photo, filename=result_path),
            caption=results.report
        )
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.")

    except Exception as e:
        logger.error(f"üÜò –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}")

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for path in [photo_path, result_path]:
            if os.path.exists(path):
                os.remove(path)
        await state.clear()
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.full_name} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ.")