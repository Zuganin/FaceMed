from sqlalchemy.future import select

from database.engine import session_maker
from database.models import Users, Diagnostics
from bot.config import logger

async def check_user_registration(username: str) -> bool:
    async with session_maker() as session:
        try:
            stmt = select(Users).where(Users.username == username)
            result = await session.execute(stmt)
            return result.scalars().first()
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

async def register_user(name: str, surname: str,username: str, age: int, gender: str) -> None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with session_maker() as session:
        try:
            async with session.begin():
                new_user = Users(name=name, surname=surname, username=username, age=age, gender= gender)
                session.add(new_user)
            logger.debug("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É")
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return


async def add_user_disease_diagnostic(username: str, filename: str, image: bytes, diagnosis: str) -> None:
    async with session_maker() as session:
        try:
            async with session.begin():
                new_diagnostic = Diagnostics(user_name=username, filename=filename, image=image, diagnosis=diagnosis)
                session.add(new_diagnostic)
            logger.debug("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É")
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
            return